pipeline {
  agent any
  
  triggers {
    pollSCM('*/3 * * * *')
  }

  environment {
    REPOSITORY_CREDENTIAL_ID = 'github-signin'
    REPOSITORY_URL = 'https://github.com/wpgur/JOONGSINT.git'
    TARGET_BRANCH = 'main'

    CONTAINER_NAME = 'TestOsintflask'


    AWS_CREDENTIAL_NAME = 'wpgur-ecr'

    ECR_PATH = '871065065486.dkr.ecr.us-east-2.amazonaws.com'
    IMAGE_NAME = '871065065486.dkr.ecr.us-east-2.amazonaws.com/jenkinsflask'
    REGION = 'us-east-2'
  }

  stages{
    stage('init') {
      steps {
        echo 'init stage'
        deleteDir()
      }
      post {
        success {
          echo 'Success init in pipeline'
        }
        failure {
          error 'fail init in pipeline'
        }
      }
    }

    stage('clone project') {
      steps {
        git url: "$REPOSITORY_URL",
        branch: "$TARGET_BRANCH",
        credentialsId: "$REPOSITORY_CREDENTIAL_ID"
        sh "ls -al"
      }
      post {
        success {
          echo 'success clone project'
        }
        failure {
          error 'fail clone project' // exit pipeline
        }
      }
    }

    stage('Build project') {
      steps {
        sh '''
        pip3 install --upgrade pip
        pip3 install -r requirements.txt
        pip3 install flask
        python3 main.py &
        '''
      }
      post {
        success {
          echo 'successfully build!'
        }
        failure {
          error 'fail to build project'
        }
      }
    }

    stage('dockerizing project') {
      steps {
        sh '''
        docker build -t $IMAGE_NAME:$BUILD_NUMBER .
        docker tag $IMAGE_NAME:$BUILD_NUMBER $IMAGE_NAME:latest
        '''
      }
      post {
        success {
          echo 'success dockerizing project'
        }
        failure {
          error 'fail dockerizing project'
          }
        }
      }
    

    stage('upload aws ECR') {
      steps {
        script {
          //cleanup cureent user docker credentials
          sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'

          docker.withRegistry("https://${ECR_PATH}", "ecr:${REGION}:${AWS_CREDENTIAL_NAME}") {
            docker.image("${IMAGE_NAME}:${BUILD_NUMBER}").push()
            docker.image("${IMAGE_NAME}:latest").push()
          }

        }
      }
      post {
        success {
          echo 'success upload image'
        }
        failure {
          error 'fail upload image'
        }
      }
    }

    stage('Trivy Scan') {
      steps {
        script {
          // Save the result to a variable
          trivyResult = sh(script: """
              date '+%Y-%m-%d %H:%M:%S' && trivy image --quiet --format template --template '{{- \$critical := 0 }}{{- \$high := 0 }}{{- range . }}{{- range .Vulnerabilities }}{{- if eq .Severity "CRITICAL" }}{{- \$critical = add \$critical 1 }}{{- end }}{{- if eq .Severity "HIGH" }}{{- \$high = add \$high 1 }}{{- end }}{{- end }}{{- end }}Critical: {{ \$critical }}, High: {{ \$high }}' 871065065486.dkr.ecr.us-east-2.amazonaws.com/jenkinsflask
          """, returnStdout: true).trim()

          // Print the result to the console
          echo "Trivy Scan Result: ${trivyResult}"

          // Send the result to Slack
          slackSend channel: '#devops-trivy-check', color: '#FF5733', message: "Trivy Scan Result: ${trivyResult}", teamDomain: 'devops-lcz1131', tokenCredentialId: 'slack_jenkins'
        }
      }
    }


    //도커 이미지 태그를 깃허브에 push
    stage('Deploy') {
      steps{
      sh('''
          git config --global user.name "wpgur"
          git config --global user.email "wpgur0510@naver.com"
          git checkout -b dev
      ''')


        script {
          previousTAG = sh(script: 'echo `expr ${BUILD_NUMBER} - 1`', returnStdout: true).trim()
        }

        withCredentials([usernamePassword(credentialsId: 'github-signin', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
            sh('''
              #!/usr/bin/env bash
              git config --local credential.helper "!f() { echo username=\\$GIT_USERNAME; echo password=\\$GIT_PASSWORD; }; f"
              echo ${previousTAG}
              sed -i "s|${ECR_PATH}.*|${ECR_PATH}/jenkinsflask:${BUILD_NUMBER}|g" manifest/flask-deployment.yaml
              git add manifest/flask-deployment.yaml
              git status
              git commit -m "update the image tag"
              git push -f origin dev
            ''')
        }
      }
    }
  }
}
